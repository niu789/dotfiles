# ====================================================================
# Main Ubuntu Development Container
# ====================================================================
[main]
# Base image configuration
image=ubuntu:24.04                    # Docker/Podman image to use - Ubuntu 24.04 LTS (Noble Numbat)
pull=true                             # Always pull the latest version of the image before creating container
replace=false                         # Don't automatically replace existing container with same name (set true to replace)
start_now=true                        # Start the container immediately after creation
# entry=false                         # Enter container after creation (default: false)

# Container settings
init=false                            # Don't use systemd/init system inside container (true for systemd services)
nvidia=false                          # Don't enable NVIDIA GPU support (true = passthrough GPU to container)
root=false                            # Run container as regular user, not root (true = run as root user)
# hostname="custom-hostname"          # Set custom hostname for container (default: container name)
# home="/custom/home"                 # Custom home directory path (default: user's home)

# Network and namespace isolation
unshare_netns=false                   # Share network namespace with host (true = isolated network)
# unshare_ipc=false                   # Unshare IPC namespace (default: false)
# unshare_pid=false                   # Unshare PID namespace (default: false) 
# unshare_devsys=false                # Unshare /dev and /sys (default: false)
# unshare_all=false                   # Unshare all namespaces (default: false)

# Volume mounts
# volume="/host/path:/container/path" # Mount additional volumes from host to container
# volume="/another/path:/another/container/path"  # Can be specified multiple times

# Container manager flags
# additional_flags="--flag"           # Additional flags to pass to podman/docker
# additional_flags="--another-flag"   # Can be specified multiple times

# Pre-initialization hooks (run BEFORE container setup)
# pre_init_hooks="command"            # Commands to run BEFORE container initialization
# pre_init_hooks="another command"    # Can be specified multiple times

# ====================================================================
# Package Installation
# ====================================================================
# SHELL AND ESSENTIAL TOOLS
additional_packages="zsh"             # Z shell - advanced shell with powerful features like better tab completion and theming
additional_packages="bash-completion" # Programmable completion for bash commands and their options
additional_packages="git"             # Version control system for tracking changes in source code
additional_packages="curl"            # Command-line tool for transferring data with URLs (downloading files, API calls)
additional_packages="wget"            # Network downloader for retrieving files from web servers
additional_packages="sudo"            # Execute commands with superuser privileges
additional_packages="gpg"             # GNU Privacy Guard - encrypt/decrypt files and manage cryptographic keys
additional_packages="keychain"        # SSH/GPG agent manager that allows key reuse between sessions
additional_packages="sshpass"
additional_packages="netcat-traditional"

# SYSTEM MONITORING & PERFORMANCE
additional_packages="htop"            # Interactive process viewer with colored output and vertical/horizontal scrolling
additional_packages="atop"            # Advanced system monitor that logs resource usage for long-term analysis
additional_packages="btop"            # Modern resource monitor with graphs, themes, and mouse support
additional_packages="iotop"           # Display I/O usage by processes in real-time (like top but for disk I/O)
additional_packages="cpufrequtils"    # Tools to manage CPU frequency scaling and power management

# SYSTEM INFORMATION
additional_packages="neofetch"        # Display system information alongside distribution ASCII art logo
additional_packages="lsb-release"

# NETWORK TROUBLESHOOTING & MONITORING
additional_packages="net-tools"       # Classic networking tools (ifconfig, netstat, route, arp)
additional_packages="nmap"            # Network exploration tool and port scanner for security auditing
additional_packages="mtr"             # Combines ping and traceroute to diagnose network issues in real-time
additional_packages="iftop"           # Display bandwidth usage on network interfaces by connection
additional_packages="iptraf-ng"       # Console-based network statistics monitoring utility
additional_packages="iperf3"          # Tool for measuring maximum TCP/UDP bandwidth performance

# DISK & FILESYSTEM UTILITIES
additional_packages="tree"            # Display directory structure in a tree-like format
additional_packages="ncdu"            # NCurses disk usage analyzer - find what's taking up space interactively
additional_packages="smartmontools"   # Monitor hard drive health using S.M.A.R.T. diagnostic data
additional_packages="nvme-cli"        # NVMe storage device management tools (for SSDs using NVMe protocol)

# FILE CONVERSION & VIEWING
additional_packages="dos2unix"        # Convert text files between DOS/Windows and Unix line endings
additional_packages="bat"             # Cat clone with syntax highlighting and Git integration
additional_packages="lsd"             # Modern ls replacement with colors, icons, and tree view

# DATA PROCESSING TOOLS
additional_packages="jq"              # Command-line JSON processor for parsing and transforming JSON data
additional_packages="yq"              # Command-line YAML processor (like jq but for YAML files)

# TERMINAL MULTIPLEXERS
additional_packages="tmux"            # Terminal multiplexer - multiple terminal sessions in one window
additional_packages="screen"          # Terminal multiplexer - detach/reattach sessions (older than tmux)

# TEXT EDITORS
additional_packages="nano"            # Simple, easy-to-use terminal text editor for beginners
additional_packages="vim"             # Vi Improved - powerful modal text editor for advanced users

# SYSTEM DEBUGGING & TROUBLESHOOTING
additional_packages="lsof"            # List open files - shows which processes have files/sockets open
additional_packages="strace"          # Trace system calls and signals for debugging programs
additional_packages="rsyslog"         # System logging daemon for managing log messages

# PYTHON SUPPORT
additional_packages="python3-pexpect" # Python module for automating interactive applications (used by Ansible)

# ====================================================================
# Post-Installation Hooks (run AFTER container setup)
# ====================================================================
# Update package lists first
init_hooks="sudo apt update"          # Update APT package lists to get latest package information

# Install essential tools for development
init_hooks="sudo apt install -y zsh git curl wget"  # Install essential tools

# Set zsh as default shell for the container user
init_hooks="sudo chsh -s /usr/bin/zsh $(whoami) 2>/dev/null || true"  # Change default shell to zsh for current user

# Install Keybase - secure messaging and file sharing
init_hooks="cd /tmp && curl --remote-name https://prerelease.keybase.io/keybase_amd64.deb && sudo apt install -y ./keybase_amd64.deb && rm ./keybase_amd64.deb"  # Download and install Keybase client

# Start Keybase service
init_hooks="run_keybase || true"      # Start Keybase service (may fail on first run, that's ok)

# ====================================================================
# Exports to Host System - Command Line Tools
# ====================================================================
exported_bins="/usr/bin/zsh"          # Z shell - make container's zsh available on host
exported_bins="/usr/bin/keychain"     # SSH/GPG agent manager - manage keys from host
exported_bins="/usr/bin/keybase"      # Keybase CLI - access Keybase commands from host
exported_bins_path="$HOME/.local/bin"  # Directory path where exported binaries will be placed

# ====================================================================
# Exports to Host System - Desktop Applications
# ====================================================================
# NOTE: Apps are exported via init_hooks after they're installed
# exported_apps="app firefox"         # Firefox browser (example - would need to be installed first)
# exported_apps="app code"            # Visual Studio Code stable (example - would need to be installed first)
# exported_apps_path="$HOME/.local/share/applications"  # Path for exported .desktop files (default)

# ====================================================================
# Environment Variables
# ====================================================================
environment="TERM=xterm-256color LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8"  # Terminal type and locale settings for proper character display
environment="EDITOR=vim"             # Default text editor (uncomment to set)
# environment="BROWSER=firefox"        # Default web browser (uncomment to set)
